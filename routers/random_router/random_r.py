import os
import random
import logging
import asyncio
from datetime import datetime
from aiogram import Router, F, types
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command

from database.db import UserDatabase
from config.create_bot import bot


logging.basicConfig(level=logging.INFO)

random_router = Router()

db = UserDatabase()

IMAGES_DIR = 'database/images'

async def send_random_image(user_id):
    images = [img for img in os.listdir(IMAGES_DIR) if img.endswith(('.png', '.jpg', '.jpeg'))]

    if not images:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    random_image = random.choice(images)
    image_path = os.path.join(IMAGES_DIR, random_image)

    photo = FSInputFile(image_path)

    await bot.send_photo(user_id, photo, caption='–ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
    return image_path


@random_router.callback_query(F.data.startswith('random_inline'), Command('meme'))
async def random_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = db.get_user(user_id)
    await callback.answer()

    if user is not None:
        last_prediction = db.get_last_prediction(user_id=user_id)
        today = datetime.now().date().isoformat()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO



        if last_prediction is not None and last_prediction[1] == today:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            if os.path.exists(last_prediction[0]):
                photo = FSInputFile(last_prediction[0])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                await bot.send_photo(user_id, photo, caption='–ù–æ–≤–æ–≥–æ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
            else:
                logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {last_prediction[0]}")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            processing_message = await callback.message.answer("–ù–∞–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤–æ –í—Å–µ–ª–µ–Ω–Ω—É—é –º–µ–º–æ–≤ üåå")
            await asyncio.sleep(2)
            await bot.delete_message(
                user_id, message_id=processing_message.message_id
            )
            processing_message = await callback.message.answer("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º üí´")
            await asyncio.sleep(2)
            await bot.delete_message(
                user_id, message_id=processing_message.message_id
            )
            processing_message = await callback.message.answer("–û–∂–∏–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–º–æ–ª–æ–≥–∞ ü•†")
            await asyncio.sleep(2)
            await bot.delete_message(
                user_id, message_id=processing_message.message_id
            )
            processing_message = await callback.message.answer("–ó–∞–≥—Ä—É–∂–∞—é –º–µ–º–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–æ—Ç–µ–∫—É üîÆ")
            await asyncio.sleep(2)
            await bot.delete_message(
                user_id, message_id=processing_message.message_id
            )

            image_path = await send_random_image(user_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if image_path:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                db.update_last_prediction(user_id, image_path)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    else:
        logging.info('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')

