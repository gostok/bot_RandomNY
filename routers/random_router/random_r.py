import os
import random
import logging
import asyncio
from datetime import datetime
from aiogram import Router, F, types
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command

from database.db import UserDatabase
from config.create_bot import bot


logging.basicConfig(level=logging.INFO)

random_router = Router()

db = UserDatabase()

IMAGES_DIR = 'database/images'


async def send_saved_image(user_id, image_path):
    logging.info(f"–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {image_path}")  # –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if os.path.exists(image_path):
        photo = FSInputFile(image_path)
        await bot.send_photo(user_id, photo, caption='–¢–≤–æ–π –≤–∞–π–± –Ω–∞ 2025 ü™Ñ‚ú®')
    else:
        logging.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –ø—É—Ç–∏ {image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")



async def handle_meme_request(user_id, message):
    user = db.get_user(user_id)

    if user is not None:
        last_prediction = db.get_last_prediction(user_id=user_id)
        logging.info(f"Last prediction: {last_prediction}")

        if last_prediction is None:
            images = [img for img in os.listdir(IMAGES_DIR) if img.endswith(('.png', '.jpg', '.jpeg'))]
            if not images:
                logging.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                return None

            random_image = random.choice(images)
            image_path = os.path.join(IMAGES_DIR, random_image)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            processing_messages = [
                "–ù–∞–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤–æ –í—Å–µ–ª–µ–Ω–Ω—É—é –º–µ–º–æ–≤ üåå",
                "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º üí´",
                "–û–∂–∏–¥–∞—é —Ä–∞—Å–∫–ª–∞–¥ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–º–æ–ª–æ–≥–∞ ü•†",
                "–ó–∞–≥—Ä—É–∂–∞—é –º–µ–º–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç–æ—Ç–µ–∫—É üîÆ"
            ]

            for msg in processing_messages:
                processing_message = await message.answer(msg)
                await asyncio.sleep(1.5)
                await bot.delete_message(user_id, message_id=processing_message.message_id)

            await send_saved_image(user_id, image_path)
            db.update_last_prediction(user_id, image_path)  # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ –±—ã–ª–æ
            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {image_path}")
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            image_path = last_prediction[0]
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            await send_saved_image(user_id, image_path)
    else:
        logging.info('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')


@random_router.message(Command('meme'))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /meme
async def meme_command_handler(message: types.Message):
    await handle_meme_request(message.from_user.id, message)


@random_router.callback_query(F.data.startswith("random_inline"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
async def meme_button_handler(callback: types.CallbackQuery):
    await callback.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await handle_meme_request(callback.from_user.id, callback.message)
